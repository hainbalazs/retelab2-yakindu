package hu.bme.mit.yakindu.analysis.workhere;

import java.util.ArrayList;
import java.util.HashMap;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.junit.Test;
import org.yakindu.sct.model.sgraph.CompositeElement;
import org.yakindu.sct.model.sgraph.State;
import org.yakindu.sct.model.sgraph.Statechart;
import org.yakindu.sct.model.sgraph.Transition;
import org.yakindu.sct.model.stext.stext.EventDefinition;
import org.yakindu.sct.model.stext.stext.VariableDefinition;

import hu.bme.mit.model2gml.Model2GML;
import hu.bme.mit.yakindu.analysis.modelmanager.ModelManager;

public class Main {
	@Test
	public void test() {
		main(new String[0]);
	}
	
	public static String capitalize(String s) {
		char title = Character.toUpperCase(s.charAt(0));
		String rest = s.substring(1);
		
		return title + rest;
		
	}
	
	public static void main(String[] args) {
		ModelManager manager = new ModelManager();
		Model2GML model2gml = new Model2GML();
		ArrayList<String> variables = new ArrayList<>();
		ArrayList<String> events = new ArrayList<>();
		
		// Loading model
		EObject root = manager.loadModel("model_input/example.sct");
		
		// Reading model
		Statechart s = (Statechart) root;
		TreeIterator<EObject> iterator = s.eAllContents();
		EObject prev = null;
		while (iterator.hasNext()) {
			EObject content = iterator.next();
			if(content instanceof VariableDefinition) {
				VariableDefinition vd = (VariableDefinition) content;
				variables.add(capitalize(vd.getName()));
			}
			if(content instanceof EventDefinition) {
				EventDefinition ed = (EventDefinition) content;
				events.add(capitalize(ed.getName()));
			}
			
		}
		
		System.out.println("public static void print(IExampleStatemachine s) {");
		for(String var : variables) {
			System.out.print("System.out.println(\"");
			System.out.print(var.charAt(0));
			System.out.println("= \" + s.getSCInterface().get" + var +"());");
		}
		System.out.print("}");
		
		
		// Transforming the model into a graph representation
		String content = model2gml.transform(root);
		// and saving it
		manager.saveFile("model_output/graph.gml", content);
	}
}
