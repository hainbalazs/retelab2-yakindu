package hu.bme.mit.yakindu.analysis.workhere;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import hu.bme.mit.yakindu.analysis.RuntimeService;
import hu.bme.mit.yakindu.analysis.TimerService;
import hu.bme.mit.yakindu.analysis.example.ExampleStatemachine;
import hu.bme.mit.yakindu.analysis.example.IExampleStatemachine;



public class RunStatechart {
	
	public static void readUserEvents(ExampleStatemachine s){
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		String command;
		try {
			command = reader.readLine();
		} catch (IOException e) {
			System.out.println("That's not a valid input.");
			return;
		}
		
		switch(command) {
		case "black":
			s.raiseBlack();
			s.runCycle();
			break;
		case "white":
			s.raiseWhite();
			s.runCycle();
			break;
		case "exit":
			break;
		default:
			System.out.println("That's not a valid event.");
		}
		
		print(s);
	}
	
	public static void main(String[] args) throws IOException {
		ExampleStatemachine s = new ExampleStatemachine();
		s.setTimer(new TimerService());
		RuntimeService.getInstance().registerStatemachine(s, 200);
		s.init();
		s.enter();
		s.runCycle();
		print(s);
		s.raiseStart();
		s.runCycle();
		readUserEvents(s);
		s.raiseWhite();
		s.runCycle();
		print(s);
		System.exit(0);
	}

	public static void print(IExampleStatemachine s) {
		System.out.println("W = " + s.getSCInterface().getWhiteTime());
		System.out.println("B = " + s.getSCInterface().getBlackTime());
	}
}
